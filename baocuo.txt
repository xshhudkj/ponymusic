package com.zionhuang.music.playback

import android.app.PendingIntent
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.database.SQLException
import android.media.audiofx.AudioEffect
import android.net.ConnectivityManager
import android.os.Binder
import androidx.core.content.getSystemService
import androidx.core.net.toUri
import androidx.datastore.preferences.core.edit
import androidx.media3.common.AudioAttributes
import androidx.media3.common.C
import androidx.media3.common.MediaItem
import androidx.media3.common.PlaybackException
import androidx.media3.common.Player
import androidx.media3.common.Player.EVENT_POSITION_DISCONTINUITY
import androidx.media3.common.Player.EVENT_TIMELINE_CHANGED
import androidx.media3.common.Player.REPEAT_MODE_ALL
import androidx.media3.common.Player.REPEAT_MODE_OFF
import androidx.media3.common.Player.REPEAT_MODE_ONE
import androidx.media3.common.Player.STATE_IDLE
import androidx.media3.common.Timeline
import androidx.media3.common.audio.SonicAudioProcessor
import androidx.media3.datasource.DataSource
import androidx.media3.datasource.DefaultDataSource
import androidx.media3.datasource.ResolvingDataSource
import androidx.media3.datasource.cache.CacheDataSource
import androidx.media3.datasource.cache.CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR
import androidx.media3.datasource.cache.SimpleCache
import androidx.media3.datasource.okhttp.OkHttpDataSource
import androidx.media3.exoplayer.DefaultRenderersFactory
import androidx.media3.exoplayer.ExoPlayer
import androidx.media3.exoplayer.analytics.AnalyticsListener
import androidx.media3.exoplayer.analytics.PlaybackStats
import androidx.media3.exoplayer.analytics.PlaybackStatsListener
import androidx.media3.exoplayer.audio.DefaultAudioSink
import androidx.media3.exoplayer.audio.SilenceSkippingAudioProcessor
import androidx.media3.exoplayer.source.DefaultMediaSourceFactory
import androidx.media3.exoplayer.source.ShuffleOrder.DefaultShuffleOrder
import androidx.media3.extractor.ExtractorsFactory
import androidx.media3.extractor.mkv.MatroskaExtractor
import androidx.media3.extractor.mp4.FragmentedMp4Extractor
import androidx.media3.session.CommandButton
import androidx.media3.session.DefaultMediaNotificationProvider
import androidx.media3.session.MediaController
import androidx.media3.session.MediaLibraryService
import androidx.media3.session.MediaSession
import androidx.media3.session.SessionToken
import com.google.common.util.concurrent.MoreExecutors
import com.zionhuang.innertube.YouTube
import com.zionhuang.innertube.models.SongItem
import com.zionhuang.innertube.models.WatchEndpoint
import com.zionhuang.innertube.models.response.PlayerResponse
import com.zionhuang.music.MainActivity
import com.zionhuang.music.R
import com.zionhuang.music.constants.AudioNormalizationKey
import com.zionhuang.music.constants.AudioQuality
import com.zionhuang.music.constants.AudioQualityKey
import com.zionhuang.music.constants.AutoLoadMoreKey
import com.zionhuang.music.constants.AutoSkipNextOnErrorKey
import com.zionhuang.music.constants.DiscordTokenKey
import com.zionhuang.music.constants.EnableDiscordRPCKey
import com.zionhuang.music.constants.HideExplicitKey
import com.zionhuang.music.constants.MediaSessionConstants.CommandToggleLibrary
import com.zionhuang.music.constants.MediaSessionConstants.CommandToggleLike
import com.zionhuang.music.constants.MediaSessionConstants.CommandToggleRepeatMode
import com.zionhuang.music.constants.MediaSessionConstants.CommandToggleShuffle
import com.zionhuang.music.constants.PauseListenHistoryKey
import com.zionhuang.music.constants.PersistentQueueKey
import com.zionhuang.music.constants.PlayerVolumeKey
import com.zionhuang.music.constants.RepeatModeKey
import com.zionhuang.music.constants.ShowLyricsKey
import com.zionhuang.music.constants.SkipSilenceKey
import com.zionhuang.music.db.MusicDatabase
import com.zionhuang.music.db.entities.Event
import com.zionhuang.music.db.entities.FormatEntity
import com.zionhuang.music.db.entities.LyricsEntity
import com.zionhuang.music.db.entities.RelatedSongMap
import com.zionhuang.music.di.DownloadCache
import com.zionhuang.music.di.PlayerCache
import com.zionhuang.music.extensions.SilentHandler
import com.zionhuang.music.extensions.collect
import com.zionhuang.music.extensions.collectLatest
import com.zionhuang.music.extensions.currentMetadata
import com.zionhuang.music.extensions.findNextMediaItemById
import com.zionhuang.music.extensions.mediaItems
import com.zionhuang.music.extensions.metadata
import com.zionhuang.music.extensions.toMediaItem
import com.zionhuang.music.lyrics.LyricsHelper
import com.zionhuang.music.models.PersistQueue
import com.zionhuang.music.models.toMediaMetadata
import com.zionhuang.music.playback.queues.EmptyQueue
import com.zionhuang.music.playback.queues.ListQueue
import com.zionhuang.music.playback.queues.Queue
import com.zionhuang.music.playback.queues.YouTubeQueue
import com.zionhuang.music.playback.queues.filterExplicit
import com.zionhuang.music.utils.CoilBitmapLoader
import com.zionhuang.music.utils.DiscordRPC
import com.zionhuang.music.utils.dataStore
import com.zionhuang.music.utils.enumPreference
import com.zionhuang.music.utils.get
import com.zionhuang.music.utils.isInternetAvailable
import com.zionhuang.music.utils.reportException
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.debounce
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.distinctUntilChangedBy
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import kotlinx.coroutines.plus
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import java.io.ObjectInputStream
import java.io.ObjectOutputStream
import java.net.ConnectException
import java.net.SocketTimeoutException
import java.net.UnknownHostException
import java.time.LocalDateTime
import javax.inject.Inject
import kotlin.math.min
import kotlin.math.pow
import kotlin.time.Duration.Companion.seconds


@OptIn(ExperimentalCoroutinesApi::class, FlowPreview::class)
@AndroidEntryPoint
class MusicService : MediaLibraryService(),
    Player.Listener,
    PlaybackStatsListener.Callback {
    @Inject
    lateinit var database: MusicDatabase

    @Inject
    lateinit var lyricsHelper: LyricsHelper

    @Inject
    lateinit var mediaLibrarySessionCallback: MediaLibrarySessionCallback

    private var scope = CoroutineScope(Dispatchers.Main) + Job()
    private val binder = MusicBinder()

    private lateinit var connectivityManager: ConnectivityManager

    private val audioQuality by enumPreference(this, AudioQualityKey, AudioQuality.AUTO)

    private var currentQueue: Queue = EmptyQueue
    var queueTitle: String? = null

    val currentMediaMetadata = MutableStateFlow<com.zionhuang.music.models.MediaMetadata?>(null)
    private val currentSong = currentMediaMetadata.flatMapLatest { mediaMetadata ->
        database.song(mediaMetadata?.id)
    }.stateIn(scope, SharingStarted.Lazily, null)
    private val currentFormat = currentMediaMetadata.flatMapLatest { mediaMetadata ->
        database.format(mediaMetadata?.id)
    }

    private val normalizeFactor = MutableStateFlow(1f)
    val playerVolume = MutableStateFlow(dataStore.get(PlayerVolumeKey, 1f).coerceIn(0f, 1f))

    lateinit var sleepTimer: SleepTimer

    @Inject
    @PlayerCache
    lateinit var playerCache: SimpleCache

    @Inject
    @DownloadCache
    lateinit var downloadCache: SimpleCache

    lateinit var player: ExoPlayer
    private lateinit var mediaSession: MediaLibrarySession

    private var isAudioEffectSessionOpened = false

    private var discordRpc: DiscordRPC? = null

    override fun onCreate() {
        super.onCreate()
        setMediaNotificationProvider(
            DefaultMediaNotificationProvider(this, { NOTIFICATION_ID }, CHANNEL_ID, R.string.music_player)
                .apply {
                    setSmallIcon(R.drawable.small_icon)
                }
        )
        player = ExoPlayer.Builder(this)
            .setMediaSourceFactory(createMediaSourceFactory())
            .setRenderersFactory(createRenderersFactory())
            .setHandleAudioBecomingNoisy(true)
            .setWakeMode(C.WAKE_MODE_NETWORK)
            .setAudioAttributes(
                AudioAttributes.Builder()
                    .setUsage(C.USAGE_MEDIA)
                    .setContentType(C.AUDIO_CONTENT_TYPE_MUSIC)
                    .build(), true
            )
            .setSeekBackIncrementMs(5000)
            .setSeekForwardIncrementMs(5000)
            .build()
            .apply {
                addListener(this@MusicService)
                sleepTimer = SleepTimer(scope, this)
                addListener(sleepTimer)
                addAnalyticsListener(PlaybackStatsListener(false, this@MusicService))
            }
        mediaLibrarySessionCallback.apply {
            toggleLike = ::toggleLike
            toggleLibrary = ::toggleLibrary
        }
        mediaSession = MediaLibrarySession.Builder(this, player, mediaLibrarySessionCallback)
            .setSessionActivity(
                PendingIntent.getActivity(
                    this,
                    0,
                    Intent(this, MainActivity::class.java),
                    PendingIntent.FLAG_IMMUTABLE
                )
            )
            .setBitmapLoader(CoilBitmapLoader(this, scope))
            .build()
        player.repeatMode = dataStore.get(RepeatModeKey, REPEAT_MODE_OFF)

        // Keep a connected controller so that notification works
        val sessionToken = SessionToken(this, ComponentName(this, MusicService::class.java))
        val controllerFuture = MediaController.Builder(this, sessionToken).buildAsync()
        controllerFuture.addListener({ controllerFuture.get() }, MoreExecutors.directExecutor())

        connectivityManager = getSystemService()!!

        combine(playerVolume, normalizeFactor) { playerVolume, normalizeFactor ->
            playerVolume * normalizeFactor
        }.collectLatest(scope) {
            player.volume = it
        }

        playerVolume.debounce(1000).collect(scope) { volume ->
            dataStore.edit { settings ->
                settings[PlayerVolumeKey] = volume
            }
        }

        currentSong.debounce(1000).collect(scope) { song ->
            updateNotification()
            if (song != null) {
                discordRpc?.updateSong(song)
            } else {
                discordRpc?.closeRPC()
            }
        }

        combine(
            currentMediaMetadata.distinctUntilChangedBy { it?.id },
            dataStore.data.map { it[ShowLyricsKey] ?: false }.distinctUntilChanged()
        ) { mediaMetadata, showLyrics ->
            mediaMetadata to showLyrics
        }.collectLatest(scope) { (mediaMetadata, showLyrics) ->
            if (showLyrics && mediaMetadata != null && database.lyrics(mediaMetadata.id).first() == null) {
                val lyrics = lyricsHelper.getLyrics(mediaMetadata)
                database.query {
                    upsert(
                        LyricsEntity(
                            id = mediaMetadata.id,
                            lyrics = lyrics
                        )
                    )
                }
            }
        }

        dataStore.data
            .map { it[SkipSilenceKey] ?: false }
            .distinctUntilChanged()
            .collectLatest(scope) {
                player.skipSilenceEnabled = it
            }

        combine(
            currentFormat,
            dataStore.data
                .map { it[AudioNormalizationKey] ?: true }
                .distinctUntilChanged()
        ) { format, normalizeAudio ->
            format to normalizeAudio
        }.collectLatest(scope) { (format, normalizeAudio) ->
            normalizeFactor.value = if (normalizeAudio && format?.loudnessDb != null) {
                min(10f.pow(-format.loudnessDb.toFloat() / 20), 1f)
            } else {
                1f
            }
        }

        dataStore.data
            .map { it[DiscordTokenKey] to (it[EnableDiscordRPCKey] ?: true) }
            .debounce(300)
            .distinctUntilChanged()
            .collect(scope) { (key, enabled) ->
                if (discordRpc?.isRpcRunning() == true) {
                    discordRpc?.closeRPC()
                }
                discordRpc = null
                if (key != null && enabled) {
                    discordRpc = DiscordRPC(this, key)
                    currentSong.value?.let {
                        discordRpc?.updateSong(it)
                    }
                }
            }

        if (dataStore.get(PersistentQueueKey, true)) {
            runCatching {
                filesDir.resolve(PERSISTENT_QUEUE_FILE).inputStream().use { fis ->
                    ObjectInputStream(fis).use { oos ->
                        oos.readObject() as PersistQueue
                    }
                }
            }.onSuccess { queue ->
                playQueue(
                    queue = ListQueue(
                        title = queue.title,
                        items = queue.items.map { it.toMediaItem() },
                        startIndex = queue.mediaItemIndex,
                        position = queue.position
                    ),
                    playWhenReady = false
                )
            }
        }

        // Save queue periodically to prevent queue loss from crash or force kill
        scope.launch {
            while (isActive) {
                delay(30.seconds)
                if (dataStore.get(PersistentQueueKey, true)) {
                    saveQueueToDisk()
                }
            }
        }
    }

    private fun updateNotification() {
        mediaSession.setCustomLayout(
            listOf(
                CommandButton.Builder()
                    .setDisplayName(getString(if (currentSong.value?.song?.inLibrary != null) R.string.remove_from_library else R.string.add_to_library))
                    .setIconResId(if (currentSong.value?.song?.inLibrary != null) R.drawable.library_add_check else R.drawable.library_add)
                    .setSessionCommand(CommandToggleLibrary)
                    .setEnabled(currentSong.value != null)
                    .build(),
                CommandButton.Builder()
                    .setDisplayName(getString(if (currentSong.value?.song?.liked == true) R.string.action_remove_like else R.string.action_like))
                    .setIconResId(if (currentSong.value?.song?.liked == true) R.drawable.favorite else R.drawable.favorite_border)
                    .setSessionCommand(CommandToggleLike)
                    .setEnabled(currentSong.value != null)
                    .build(),
                CommandButton.Builder()
                    .setDisplayName(getString(if (player.shuffleModeEnabled) R.string.action_shuffle_off else R.string.action_shuffle_on))
                    .setIconResId(if (player.shuffleModeEnabled) R.drawable.shuffle_on else R.drawable.shuffle)
                    .setSessionCommand(CommandToggleShuffle)
                    .build(),
                CommandButton.Builder()
                    .setDisplayName(
                        getString(
                            when (player.repeatMode) {
                                REPEAT_MODE_OFF -> R.string.repeat_mode_off
                                REPEAT_MODE_ONE -> R.string.repeat_mode_one
                                REPEAT_MODE_ALL -> R.string.repeat_mode_all
                                else -> throw IllegalStateException()
                            }
                        )
                    )
                    .setIconResId(
                        when (player.repeatMode) {
                            REPEAT_MODE_OFF -> R.drawable.repeat
                            REPEAT_MODE_ONE -> R.drawable.repeat_one_on
                            REPEAT_MODE_ALL -> R.drawable.repeat_on
                            else -> throw IllegalStateException()
                        }
                    )
                    .setSessionCommand(CommandToggleRepeatMode)
                    .build()
            )
        )
    }

    private suspend fun recoverSong(mediaId: String, playerResponse: PlayerResponse? = null) {
        val song = database.song(mediaId).first()
        val mediaMetadata = withContext(Dispatchers.Main) {
            player.findNextMediaItemById(mediaId)?.metadata
        } ?: return
        val duration = song?.song?.duration?.takeIf { it != -1 }
            ?: mediaMetadata.duration.takeIf { it != -1 }
            ?: (playerResponse ?: YouTube.player(mediaId).getOrNull())?.videoDetails?.lengthSeconds?.toInt()
            ?: -1
        database.query {
            if (song == null) insert(mediaMetadata.copy(duration = duration))
            else if (song.song.duration == -1) update(song.song.copy(duration = duration))
        }
        if (!database.hasRelatedSongs(mediaId)) {
            val relatedEndpoint = YouTube.next(WatchEndpoint(videoId = mediaId)).getOrNull()?.relatedEndpoint ?: return
            val relatedPage = YouTube.related(relatedEndpoint).getOrNull() ?: return
            database.query {
                relatedPage.songs
                    .map(SongItem::toMediaMetadata)
                    .onEach(::insert)
                    .map {
                        RelatedSongMap(
                            songId = mediaId,
                            relatedSongId = it.id
                        )
                    }
                    .forEach(::insert)
            }
        }
    }

    fun playQueue(queue: Queue, playWhenReady: Boolean = true) {
        if (!scope.isActive) {
            scope = CoroutineScope(Dispatchers.Main) + Job()
        }
        currentQueue = queue
        queueTitle = null
        player.shuffleModeEnabled = false
        if (queue.preloadItem != null) {
            player.setMediaItem(queue.preloadItem!!.toMediaItem())
            player.prepare()
            player.playWhenReady = playWhenReady
        }

        scope.launch(SilentHandler) {
            val initialStatus = withContext(Dispatchers.IO) {
                queue.getInitialStatus().filterExplicit(dataStore.get(HideExplicitKey, false))
            }
            if (queue.preloadItem != null && player.playbackState == STATE_IDLE) return@launch
            if (initialStatus.title != null) {
                queueTitle = initialStatus.title
            }
            if (initialStatus.items.isEmpty()) return@launch
            if (queue.preloadItem != null) {
                // add missing songs back, without affecting current playing song
                player.addMediaItems(0, initialStatus.items.subList(0, initialStatus.mediaItemIndex))
                player.addMediaItems(initialStatus.items.subList(initialStatus.mediaItemIndex + 1, initialStatus.items.size))
            } else {
                player.setMediaItems(initialStatus.items, if (initialStatus.mediaItemIndex > 0) initialStatus.mediaItemIndex else 0, initialStatus.position)
                player.prepare()
                player.playWhenReady = playWhenReady
            }
        }
    }

    fun startRadioSeamlessly() {
        val currentMediaMetadata = player.currentMetadata ?: return
        if (player.currentMediaItemIndex > 0) player.removeMediaItems(0, player.currentMediaItemIndex)
        if (player.currentMediaItemIndex < player.mediaItemCount - 1) player.removeMediaItems(player.currentMediaItemIndex + 1, player.mediaItemCount)
        scope.launch(SilentHandler) {
            val radioQueue = YouTubeQueue(endpoint = WatchEndpoint(videoId = currentMediaMetadata.id))
            val initialStatus = radioQueue.getInitialStatus()
            if (initialStatus.title != null) {
                queueTitle = initialStatus.title
            }
            player.addMediaItems(initialStatus.items.drop(1))
            currentQueue = radioQueue
        }
    }

    fun playNext(items: List<MediaItem>) {
        player.addMediaItems(if (player.mediaItemCount == 0) 0 else player.currentMediaItemIndex + 1, items)
        player.prepare()
    }

    fun addToQueue(items: List<MediaItem>) {
        player.addMediaItems(items)
        player.prepare()
    }

    fun toggleLibrary() {
        database.query {
            currentSong.value?.let {
                update(it.song.toggleLibrary())
            }
        }
    }

    fun toggleLike() {
        database.query {
            currentSong.value?.let {
                update(it.song.toggleLike())
            }
        }
    }

    private fun openAudioEffectSession() {
        if (isAudioEffectSessionOpened) return
        isAudioEffectSessionOpened = true
        sendBroadcast(
            Intent(AudioEffect.ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION).apply {
                putExtra(AudioEffect.EXTRA_AUDIO_SESSION, player.audioSessionId)
                putExtra(AudioEffect.EXTRA_PACKAGE_NAME, packageName)
                putExtra(AudioEffect.EXTRA_CONTENT_TYPE, AudioEffect.CONTENT_TYPE_MUSIC)
            }
        )
    }

    private fun closeAudioEffectSession() {
        if (!isAudioEffectSessionOpened) return
        isAudioEffectSessionOpened = false
        sendBroadcast(
            Intent(AudioEffect.ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION).apply {
                putExtra(AudioEffect.EXTRA_AUDIO_SESSION, player.audioSessionId)
                putExtra(AudioEffect.EXTRA_PACKAGE_NAME, packageName)
            }
        )
    }

    override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {
        // Auto load more songs
        if (dataStore.get(AutoLoadMoreKey, true) &&
            reason != Player.MEDIA_ITEM_TRANSITION_REASON_REPEAT &&
            player.mediaItemCount - player.currentMediaItemIndex <= 5 &&
            currentQueue.hasNextPage()
        ) {
            scope.launch(SilentHandler) {
                val mediaItems = currentQueue.nextPage().filterExplicit(dataStore.get(HideExplicitKey, false))
                if (player.playbackState != STATE_IDLE) {
                    player.addMediaItems(mediaItems)
                }
            }
        }
    }

    override fun onPlaybackStateChanged(@Player.State playbackState: Int) {
        if (playbackState == STATE_IDLE) {
            currentQueue = EmptyQueue
            player.shuffleModeEnabled = false
            queueTitle = null
        }
    }

    override fun onEvents(player: Player, events: Player.Events) {
        if (events.containsAny(Player.EVENT_PLAYBACK_STATE_CHANGED, Player.EVENT_PLAY_WHEN_READY_CHANGED)) {
            val isBufferingOrReady = player.playbackState == Player.STATE_BUFFERING || player.playbackState == Player.STATE_READY
            if (isBufferingOrReady && player.playWhenReady) {
                openAudioEffectSession()
            } else {
                closeAudioEffectSession()
            }
        }
        if (events.containsAny(EVENT_TIMELINE_CHANGED, EVENT_POSITION_DISCONTINUITY)) {
            currentMediaMetadata.value = player.currentMetadata
        }
    }


    override fun onShuffleModeEnabledChanged(shuffleModeEnabled: Boolean) {
        updateNotification()
        if (shuffleModeEnabled) {
            // Always put current playing item at first
            val shuffledIndices = IntArray(player.mediaItemCount) { it }
            shuffledIndices.shuffle()
            shuffledIndices[shuffledIndices.indexOf(player.currentMediaItemIndex)] = shuffledIndices[0]
            shuffledIndices[0] = player.currentMediaItemIndex
            player.setShuffleOrder(DefaultShuffleOrder(shuffledIndices, System.currentTimeMillis()))
        }
    }

    override fun onRepeatModeChanged(repeatMode: Int) {
        updateNotification()
        scope.launch {
            dataStore.edit { settings ->
                settings[RepeatModeKey] = repeatMode
            }
        }
    }

    override fun onPlayerError(error: PlaybackException) {
        if (dataStore.get(AutoSkipNextOnErrorKey, false) &&
            isInternetAvailable(this) &&
            player.hasNextMediaItem()
        ) {
            player.seekToNext()
            player.prepare()
            player.playWhenReady = true
        }
    }

    private fun createCacheDataSource(): CacheDataSource.Factory =
        CacheDataSource.Factory()
            .setCache(downloadCache)
            .setUpstreamDataSourceFactory(
                CacheDataSource.Factory()
                    .setCache(playerCache)
                    .setUpstreamDataSourceFactory(
                        DefaultDataSource.Factory(
                            this,
                            OkHttpDataSource.Factory(
                                OkHttpClient.Builder()
                                    .proxy(YouTube.proxy)
                                    .build()
                            )
                        )
                    )
            )
            .setCacheWriteDataSinkFactory(null)
            .setFlags(FLAG_IGNORE_CACHE_ON_ERROR)

    private fun createDataSourceFactory(): DataSource.Factory {
        val songUrlCache = HashMap<String, Pair<String, Long>>()
        return ResolvingDataSource.Factory(createCacheDataSource()) { dataSpec ->
            val mediaId = dataSpec.key ?: error("No media id")

            if (downloadCache.isCached(mediaId, dataSpec.position, if (dataSpec.length >= 0) dataSpec.length else 1) ||
                playerCache.isCached(mediaId, dataSpec.position, CHUNK_LENGTH)
            ) {
                scope.launch(Dispatchers.IO) { recoverSong(mediaId) }
                return@Factory dataSpec
            }

            songUrlCache[mediaId]?.takeIf { it.second < System.currentTimeMillis() }?.let {
                scope.launch(Dispatchers.IO) { recoverSong(mediaId) }
                return@Factory dataSpec.withUri(it.first.toUri())
            }

            // Check whether format exists so that users from older version can view format details
            // There may be inconsistent between the downloaded file and the displayed info if user change audio quality frequently
            val playedFormat = runBlocking(Dispatchers.IO) { database.format(mediaId).first() }
            val playerResponse = runBlocking(Dispatchers.IO) {
                YouTube.player(mediaId)
            }.getOrElse { throwable ->
                when (throwable) {
                    is ConnectException, is UnknownHostException -> {
                        throw PlaybackException(getString(R.string.error_no_internet), throwable, PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED)
                    }

                    is SocketTimeoutException -> {
                        throw PlaybackException(getString(R.string.error_timeout), throwable, PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT)
                    }

                    else -> throw PlaybackException(getString(R.string.error_unknown), throwable, PlaybackException.ERROR_CODE_REMOTE_ERROR)
                }
            }
            if (playerResponse.playabilityStatus.status != "OK") {
                throw PlaybackException(playerResponse.playabilityStatus.reason, null, PlaybackException.ERROR_CODE_REMOTE_ERROR)
            }

            val format =
                if (playedFormat != null) {
                    playerResponse.streamingData?.adaptiveFormats?.find {
                        // Use itag to identify previously played format
                        it.itag == playedFormat.itag
                    }
                } else {
                    playerResponse.streamingData?.adaptiveFormats
                        ?.filter { it.isAudio }
                        ?.maxByOrNull {
                            it.bitrate * when (audioQuality) {
                                AudioQuality.AUTO -> if (connectivityManager.isActiveNetworkMetered) -1 else 1
                                AudioQuality.HIGH -> 1
                                AudioQuality.LOW -> -1
                            } + (if (it.mimeType.startsWith("audio/webm")) 10240 else 0) // prefer opus stream
                        }
                } ?: throw PlaybackException(getString(R.string.error_no_stream), null, ERROR_CODE_NO_STREAM)

            database.query {
                upsert(
                    FormatEntity(
                        id = mediaId,
                        itag = format.itag,
                        mimeType = format.mimeType.split(";")[0],
                        codecs = format.mimeType.split("codecs=")[1].removeSurrounding("\""),
                        bitrate = format.bitrate,
                        sampleRate = format.audioSampleRate,
                        contentLength = format.contentLength!!,
                        loudnessDb = playerResponse.playerConfig?.audioConfig?.loudnessDb
                    )
                )
            }
            scope.launch(Dispatchers.IO) { recoverSong(mediaId, playerResponse) }

            songUrlCache[mediaId] = format.url!! to playerResponse.streamingData!!.expiresInSeconds * 1000L
            dataSpec.withUri(format.url!!.toUri()).subrange(dataSpec.uriPositionOffset, CHUNK_LENGTH)
        }
    }

    private fun createMediaSourceFactory() =
        DefaultMediaSourceFactory(
            createDataSourceFactory(),
            ExtractorsFactory {
                arrayOf(MatroskaExtractor(), FragmentedMp4Extractor())
            }
        )

    private fun createRenderersFactory() =
        object : DefaultRenderersFactory(this) {
            override fun buildAudioSink(
                context: Context,
                enableFloatOutput: Boolean,
                enableAudioTrackPlaybackParams: Boolean,
            ) = DefaultAudioSink.Builder(this@MusicService)
                .setEnableFloatOutput(enableFloatOutput)
                .setEnableAudioTrackPlaybackParams(enableAudioTrackPlaybackParams)
                .setAudioProcessorChain(
                    DefaultAudioSink.DefaultAudioProcessorChain(
                        emptyArray(),
                        SilenceSkippingAudioProcessor(2_000_000, 0.01f, 2_000_000, 0, 256),
                        SonicAudioProcessor()
                    )
                )
                .build()
        }

    override fun onPlaybackStatsReady(eventTime: AnalyticsListener.EventTime, playbackStats: PlaybackStats) {
        val mediaItem = eventTime.timeline.getWindow(eventTime.windowIndex, Timeline.Window()).mediaItem
        if (playbackStats.totalPlayTimeMs >= 30000 && !dataStore.get(PauseListenHistoryKey, false)) {
            database.query {
                incrementTotalPlayTime(mediaItem.mediaId, playbackStats.totalPlayTimeMs)
                try {
                    insert(
                        Event(
                            songId = mediaItem.mediaId,
                            timestamp = LocalDateTime.now(),
                            playTime = playbackStats.totalPlayTimeMs
                        )
                    )
                } catch (_: SQLException) {
                }
            }
        }
    }

    private fun saveQueueToDisk() {
        if (player.playbackState == STATE_IDLE) {
            filesDir.resolve(PERSISTENT_QUEUE_FILE).delete()
            return
        }
        val persistQueue = PersistQueue(
            title = queueTitle,
            items = player.mediaItems.mapNotNull { it.metadata },
            mediaItemIndex = player.currentMediaItemIndex,
            position = player.currentPosition
        )
        runCatching {
            filesDir.resolve(PERSISTENT_QUEUE_FILE).outputStream().use { fos ->
                ObjectOutputStream(fos).use { oos ->
                    oos.writeObject(persistQueue)
                }
            }
        }.onFailure {
            reportException(it)
        }
    }

    override fun onDestroy() {
        if (dataStore.get(PersistentQueueKey, true)) {
            saveQueueToDisk()
        }
        if (discordRpc?.isRpcRunning() == true) {
            discordRpc?.closeRPC()
        }
        discordRpc = null
        mediaSession.release()
        player.removeListener(this)
        player.removeListener(sleepTimer)
        player.release()
        super.onDestroy()
    }

    override fun onBind(intent: Intent?) = super.onBind(intent) ?: binder

    override fun onTaskRemoved(rootIntent: Intent?) {
        super.onTaskRemoved(rootIntent)
        stopSelf()
    }

    override fun onGetSession(controllerInfo: MediaSession.ControllerInfo) = mediaSession

    inner class MusicBinder : Binder() {
        val service: MusicService
            get() = this@MusicService
    }

    companion object {
        const val ROOT = "root"
        const val SONG = "song"
        const val ARTIST = "artist"
        const val ALBUM = "album"
        const val PLAYLIST = "playlist"

        const val CHANNEL_ID = "music_channel_01"
        const val NOTIFICATION_ID = 888
        const val ERROR_CODE_NO_STREAM = 1000001
        const val CHUNK_LENGTH = 512 * 1024L
        const val PERSISTENT_QUEUE_FILE = "persistent_queue.data"
    }
}
**任务1：实现网易云鲸云特效**
- 深入研究并集成鲸云特效功能，参考以下资源：
  - GitHub项目：https://github.com/gauravk95/audio-visualizer-android（分析其实现原理和核心代码和使用方法）
  - 技术文章：https://github.com/gauravk95/audio-visualizer-android/issues/37（理解特效的设计思路）
- 将鲸云特效适配到当前播放界面，确保在车载环境下的性能表现
- 特效应与音乐播放状态同步，在播放时显示动态效果

**任务2：歌词显示功能增强**
- 基于现有的LrcView库（https://github.com/wangchenyan/lrcview）进行以下优化：
  - 实现歌词高亮颜色智能匹配：根据当前播放歌曲的封面主色调或背景色自动调整歌词高亮颜色，确保良好的视觉对比度
  - 添加手动拖拽歌词功能：当用户拖拽歌词时，在对应行歌词周围显示一个高亮框或边框，提供清晰的视觉反馈
  - 确保所有修改都通过LrcView库的公开属性和方法实现，避免破坏库的封装性

**任务3：系统通知栏功能完善**
- 仔细分析baocuo.txt文件中的报错日志，识别通知栏实现中的具体问题
- 基于错误日志中的代码片段，修复MediaSession通知栏的以下问题：
  - 通知栏背景颜色不稳定（时而正常时而黑色）
  - 确保通知栏在不同播放状态下的一致性显示
  - 优化通知栏的封面图片显示和更新机制
- 参考报错日志中提到的正确实现方式进行修复

**任务4：底部播放栏进度UI优化**
- 在播放栏实现类似前面参考图片中的长方形灰色进度条样式
- 进度条应该：
  - 显示为简洁的灰色线性进度条（而非圆形进度条）
  - 位置应与参考图片保持一致
  - 支持播放进度显示即可
  - 在车载环境下具有良好的可视性和触摸响应

**执行要求：**
- 每完成一个任务后执行编译验证
- 遵循MVVM架构模式，不破坏现有核心功能
- 优先使用成熟的第三方库，减少自定义实现的复杂度
- 确保所有功能在Android Automotive环境下的性能和用户体验
- 提供每个任务完成后的详细功能总结和测试结果
Augment
我理解您的需求，需要分3个阶段完成Android Automotive音乐应用的优化任务。让我先深入了解项目的当前状态，然后制定详细的执行计划。

Augment Context Engine
查找项目中的底部播放栏PlayBar相关代码，包括布局文件、Fragment/Activity类、进度显示组件（CircularProgressIndicator、BufferedCircularProgressIndicator）的具体实现和位置
Read lines 1-100
api.txt
Search for:
手机登录|验证码|登录
api.txt
现在让我查看具体的手机登录和验证码相关的API接口详情：

                                                  Caused by:
                                                                                                        0: In get_rem_prov_attest_key_helper: Failed to assign a key
                                                                                                        1: In assign_attestation_key: 
                                                                                                        2: In with_transaction.
                                                                                                        3: Out of keys.
                                                                                                        4: Error::Rc(ResponseCode(22))
2025-06-02 19:38:15.513 29719-29719 moteprovisioner         com.android.remoteprovisioner        E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 19:39:01.868   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:39:30.938   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:40:35.849 29719-29734 ServerInterface         com.android.remoteprovisioner        E  Server timed out (Ask Gemini)
                                                                                                    java.net.SocketTimeoutException: failed to connect to remoteprovisioning.googleapis.com/142.251.33.74 (port 443) from /10.0.2.15 (port 44296) after 20000ms
                                                                                                    	at libcore.io.IoBridge.connectErrno(IoBridge.java:235)
                                                                                                    	at libcore.io.IoBridge.connect(IoBridge.java:179)
                                                                                                    	at java.net.PlainSocketImpl.socketConnect(PlainSocketImpl.java:142)
                                                                                                    	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:390)
                                                                                                    	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:230)
                                                                                                    	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:212)
                                                                                                    	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:436)
                                                                                                    	at java.net.Socket.connect(Socket.java:646)
                                                                                                    	at com.android.okhttp.internal.Platform.connectSocket(Platform.java:182)
                                                                                                    	at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:145)
                                                                                                    	at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
                                                                                                    	at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
                                                                                                    	at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
                                                                                                    	at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
                                                                                                    	at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
                                                                                                    	at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
                                                                                                    	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
                                                                                                    	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
                                                                                                    	at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:262)
                                                                                                    	at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:219)
                                                                                                    	at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:30)
                                                                                                    	at com.android.remoteprovisioner.ServerInterface.fetchGeek(ServerInterface.java:149)
                                                                                                    	at com.android.remoteprovisioner.service.GenerateRkpKeyService$1.checkAndFillPool(GenerateRkpKeyService.java:135)
                                                                                                    	at com.android.remoteprovisioner.service.GenerateRkpKeyService$1.notifyKeyGenerated(GenerateRkpKeyService.java:88)
                                                                                                    	at android.security.IGenerateRkpKeyService$Stub.onTransact(IGenerateRkpKeyService.java:108)
                                                                                                    	at android.os.Binder.execTransactInternal(Binder.java:1285)
                                                                                                    	at android.os.Binder.execTransact(Binder.java:1244)
2025-06-02 19:40:35.851 29719-29734 RemoteProv...ingService com.android.remoteprovisioner        E  RemoteProvisioningException:  (Ask Gemini)
                                                                                                    com.android.remoteprovisioner.RemoteProvisioningException: Error fetching GEEK
                                                                                                    	at com.android.remoteprovisioner.ServerInterface.makeNetworkError(ServerInterface.java:213)
                                                                                                    	at com.android.remoteprovisioner.ServerInterface.fetchGeek(ServerInterface.java:194)
                                                                                                    	at com.android.remoteprovisioner.service.GenerateRkpKeyService$1.checkAndFillPool(GenerateRkpKeyService.java:135)
                                                                                                    	at com.android.remoteprovisioner.service.GenerateRkpKeyService$1.notifyKeyGenerated(GenerateRkpKeyService.java:88)
                                                                                                    	at android.security.IGenerateRkpKeyService$Stub.onTransact(IGenerateRkpKeyService.java:108)
                                                                                                    	at android.os.Binder.execTransactInternal(Binder.java:1285)
                                                                                                    	at android.os.Binder.execTransact(Binder.java:1244)
2025-06-02 19:41:01.867   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:41:03.302  1204-26064 WakeLock                com.google.android.gms.persistent    E  GCM_HB_ALARM release without a matched acquire!
2025-06-02 19:42:10.981   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:42:45.053 23588-23721 PlayCommon              com.android.vending                  E  [522] ypn.j(2653): Failed to connect to server for log upload.
2025-06-02 19:43:01.867   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:44:51.024   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:45:01.868   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:47:01.884   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:47:31.048   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:49:01.874   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:50:11.100   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:51:01.891   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:52:51.132   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:53:00.375  1435-1704  bluetooth               com.google.android.bluetooth         E  packages/modules/Bluetooth/system/gd/os/linux_generic/files.cc:202 FileCreatedTime: unable to read '/data/misc/bluetooth/logs/btsnooz_hci.log' file metadata, error: No such file or directory
2025-06-02 19:53:01.891   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:53:05.979 23588-23721 PlayCommon              com.android.vending                  E  [522] ypn.j(1620): Failed to connect to server for server timestamp: java.net.SocketTimeoutException: failed to connect to play.googleapis.com/2001:4860:4802:34::223 (port 443) from /fec0::5054:ff:fe12:3456 (port 50064) after 40000ms
2025-06-02 19:55:01.892   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:55:31.192   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:56:03.319  1204-26061 WakeLock                com.google.android.gms.persistent    E  GCM_HB_ALARM release without a matched acquire!
2025-06-02 19:57:01.893   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:58:11.218   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 19:58:26.785 23588-23721 PlayCommon              com.android.vending                  E  [522] ypn.j(2653): Failed to connect to server for log upload.
2025-06-02 19:59:01.895   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:00:51.271   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 20:01:01.897   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:03:01.896   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:03:31.281   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 20:05:01.897   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:05:12.536 16793-16831 RadioStationSyncImpl    com.google.android.carassistant      E  Error retrieving the OEM radio App's browse tree (Ask Gemini)
                                                                                                    java.lang.IllegalStateException: resolveInfo is null
                                                                                                    	at izy.c(PG:28)
                                                                                                    	at jdj.a(PG:35)
                                                                                                    	at jcx.a(PG:164)
                                                                                                    	at uok.a(PG:202)
                                                                                                    	at uzf.a(PG:105)
                                                                                                    	at yap.a(PG:3)
                                                                                                    	at xzv.run(PG:19)
                                                                                                    	at yar.run(PG:5)
                                                                                                    	at lvo.run(PG:3)
                                                                                                    	at xrk.run(PG:50)
                                                                                                    	at lsy.run(PG:512)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
                                                                                                    	at lwy.run(PG:74)
2025-06-02 20:05:12.889  1773-1773  gle.android.gms         com.google.android.gms               E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:06:11.326   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 20:06:13.042  1204-27161 dmiq                    com.google.android.gms.persistent    E  *~*~*~ Previous channel {0} was garbage collected without being shut down! ~*~*~* (Ask Gemini)
                                                                                                        Make sure to call shutdown()/shutdownNow()
                                                                                                    java.lang.RuntimeException: ManagedChannel allocation site
                                                                                                    	at dmip.<init>(:com.google.android.gms@242632114@24.26.32 (230800-650348549):21)
                                                                                                    	at dmiq.<init>(:com.google.android.gms@242632114@24.26.32 (230800-650348549):10)
                                                                                                    	at dmio.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):254)
                                                                                                    	at dlvv.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):5)
                                                                                                    	at adoq.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):67)
                                                                                                    	at adoh.e(:com.google.android.gms@242632114@24.26.32 (230800-650348549):350)
                                                                                                    	at adoh.f(:com.google.android.gms@242632114@24.26.32 (230800-650348549):5)
                                                                                                    	at amzf.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):698)
                                                                                                    	at adnq.call(:com.google.android.gms@242632114@24.26.32 (230800-650348549):3)
                                                                                                    	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
                                                                                                    	at adtm.c(:com.google.android.gms@242632114@24.26.32 (230800-650348549):50)
                                                                                                    	at adtm.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):97)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at adys.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:06:14.205  1335-15469 dmiq                    com.google.android.gms.persistent    E  *~*~*~ Previous channel {0} was garbage collected without being shut down! ~*~*~* (Ask Gemini)
                                                                                                        Make sure to call shutdown()/shutdownNow()
                                                                                                    java.lang.RuntimeException: ManagedChannel allocation site
                                                                                                    	at dmip.<init>(:com.google.android.gms@242632114@24.26.32 (230800-650348549):21)
                                                                                                    	at dmiq.<init>(:com.google.android.gms@242632114@24.26.32 (230800-650348549):10)
                                                                                                    	at dmio.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):254)
                                                                                                    	at dlvv.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):5)
                                                                                                    	at adoq.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):67)
                                                                                                    	at adoh.e(:com.google.android.gms@242632114@24.26.32 (230800-650348549):350)
                                                                                                    	at adoh.f(:com.google.android.gms@242632114@24.26.32 (230800-650348549):5)
                                                                                                    	at amzf.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):698)
                                                                                                    	at adnq.call(:com.google.android.gms@242632114@24.26.32 (230800-650348549):3)
                                                                                                    	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
                                                                                                    	at adtm.c(:com.google.android.gms@242632114@24.26.32 (230800-650348549):50)
                                                                                                    	at adtm.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):97)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at adys.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:06:43.373  1335-26072 CCTFlatFileLogStore     com.google.android.gms.persistent    E  Can't get boot count and uptime from log event. (Ask Gemini)
                                                                                                    dbgh: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.
                                                                                                    	at dbed.X(:com.google.android.gms@242632114@24.26.32 (230800-650348549):29)
                                                                                                    	at dbed.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at dbed.s(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at dbed.j(:com.google.android.gms@242632114@24.26.32 (230800-650348549):120)
                                                                                                    	at dbed.n(:com.google.android.gms@242632114@24.26.32 (230800-650348549):1)
                                                                                                    	at absp.f(:com.google.android.gms@242632114@24.26.32 (230800-650348549):174)
                                                                                                    	at abum.next(:com.google.android.gms@242632114@24.26.32 (230800-650348549):66)
                                                                                                    	at com.google.android.gms.clearcut.uploader.QosUploaderChimeraService.g(:com.google.android.gms@242632114@24.26.32 (230800-650348549):936)
                                                                                                    	at com.google.android.gms.clearcut.uploader.QosUploaderChimeraService.a(:com.google.android.gms@242632114@24.26.32 (230800-650348549):24)
                                                                                                    	at avkn.call(:com.google.android.gms@242632114@24.26.32 (230800-650348549):32)
                                                                                                    	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
                                                                                                    	at adtm.c(:com.google.android.gms@242632114@24.26.32 (230800-650348549):50)
                                                                                                    	at adtm.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):76)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at adys.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:07:01.899   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:07:46.567   597-5189  InputDispatcher         system_server                        E  But another display has a focused window
                                                                                                      FocusedWindows:
                                                                                                        displayId=3, name='9702c05 com.android.systemui/com.android.systemui.car.distantdisplay.activity.DistantDisplayActivity'
                                                                                                        displayId=2, name='452cac6 com.android.car.cluster.osdouble/com.android.car.cluster.osdouble.ClusterOsDoubleActivity'
                                                                                                        displayId=6, name='2f7bdd2 com.android.systemui/com.android.systemui.car.distantdisplay.activity.RootTaskViewWallpaperActivity'
                                                                                                        displayId=5, name='b709e58 com.android.systemui/com.android.systemui.car.distantdisplay.activity.NavigationTaskViewWallpaperActivity'
2025-06-02 20:07:46.720   383-383   BpTransact...edListener surfaceflinger                       E  Failed to transact (-32)
2025-06-02 20:07:47.080  2296-2424  OpenGLRenderer          com.android.car.carlauncher          E  Unable to match the desired swap behavior.
2025-06-02 20:07:49.032  1008-1008  SmsApplication          com.android.phone                    E  com.android.mms.service does not have system signature
2025-06-02 20:07:49.074   445-460   installd                installd                             E  Couldn't opendir /data/app/vmdl928891114.tmp: No such file or directory
2025-06-02 20:07:49.074   445-460   installd                installd                             E  Failed to delete /data/app/vmdl928891114.tmp: No such file or directory
2025-06-02 20:07:49.236  1008-1008  SmsApplication          com.android.phone                    E  com.android.mms.service does not have system signature
2025-06-02 20:07:49.239  2527-2527  ndroid.keychain         com.android.keychain                 E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:07:49.286  1008-1008  SmsApplication          com.android.phone                    E  com.android.mms.service does not have system signature
2025-06-02 20:07:49.698   597-1195  CellBroadcastUtils      system_server                        E  getDefaultCellBroadcastReceiverPackageName: no package found
2025-06-02 20:07:50.016  2582-2582  android.vending         com.android.vending                  E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:07:50.356  2296-2424  OpenGLRenderer          com.android.car.carlauncher          E  Unable to match the desired swap behavior.
2025-06-02 20:07:50.833  1773-1773  ChimeraRcvrProxy        com.google.android.gms               E  com.google.android.gms.gass.chimera.PackageChangeBroadcastReceiver dropping broadcast android.intent.action.PACKAGE_ADDED
2025-06-02 20:07:50.919  1773-1773  ChimeraRcvrProxy        com.google.android.gms               E  com.google.android.gms.gass.chimera.PackageChangeBroadcastReceiver dropping broadcast android.intent.action.PACKAGE_REPLACED
2025-06-02 20:07:51.541  2582-2660  Finsky                  com.android.vending                  E  [510] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:07:51.857   597-1921  TaskPersister           system_server                        E  File error accessing recents directory (directory doesn't exist?).
2025-06-02 20:07:51.857   597-1921  TaskPersister           system_server                        E  File error accessing recents directory (directory doesn't exist?).
2025-06-02 20:07:52.451  2779-2779  ssioncontroller         com....android.permissioncontroller  E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:07:52.719  2582-2666  Finsky                  com.android.vending                  E  [515] jhs.c(122): Unable to fetch checkin consistency token: empty token
2025-06-02 20:07:52.720  2582-2666  Finsky                  com.android.vending                  E  [515] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:07:52.728  2824-2824  ding:background         com.android.vending                  E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:07:52.983  1773-1837  ProtoLiteUtils          com.google.android.gms               E  Corrupt protobuf data, expected CRC: 82 computed CRC: 0
2025-06-02 20:07:53.036  1335-1393  UsageReportingOptionsSt com.google.android.gms.persistent    E  INTERNAL_ERROR: setOptInOption should not be called while user is locked. [CONTEXT service_id=41 ]
2025-06-02 20:07:53.338  1773-1834  native                  com.google.android.gms               E  E0000 00:00:1748866073.338017    1834 document-store.cc:1359] Failed to update per-doc-data with usage report
2025-06-02 20:07:53.544  2915-2915  d.process.acore         android.process.acore                E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:07:54.323  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:07:54.347  2582-2702  Finsky                  com.android.vending                  E  [528] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:07:54.349  2582-2702  Finsky                  com.android.vending                  E  [528] rcz.WA(261): [PLUS] Failed to trigger NOW_EXCLUSIVE urgency sync (Ask Gemini)
                                                                                                    java.lang.IllegalStateException: Cannot sync with 0 Android ID
                                                                                                    	at suw.a(PG:71)
                                                                                                    	at rak.a(PG:144)
                                                                                                    	at ablb.d(PG:3)
                                                                                                    	at abld.run(PG:42)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at kiq.run(PG:324)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:07:54.349  2582-2702  Finsky                  com.android.vending                  E  [528] gmr.WA(29): [DeviceConfig] failed to update device attribute payloads (Ask Gemini)
                                                                                                    java.lang.IllegalStateException: Cannot sync with 0 Android ID
                                                                                                    	at suw.a(PG:71)
                                                                                                    	at rak.a(PG:144)
                                                                                                    	at ablb.d(PG:3)
                                                                                                    	at abld.run(PG:42)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at kiq.run(PG:324)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:07:54.362  2582-2666  Finsky                  com.android.vending                  E  [515] kzd.run(1284): Upload device configuration failed
2025-06-02 20:07:54.988  1773-1837  ProtoLiteUtils          com.google.android.gms               E  Corrupt protobuf data, expected CRC: 82 computed CRC: 0
2025-06-02 20:07:55.092  2582-2666  Finsky                  com.android.vending                  E  [515] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:07:55.535  2582-2666  Finsky                  com.android.vending                  E  [515] jhs.c(122): Unable to fetch checkin consistency token: empty token
2025-06-02 20:07:55.912  1773-1834  ProtoLiteUtils          com.google.android.gms               E  Corrupt protobuf data, expected CRC: 82 computed CRC: 0
2025-06-02 20:07:56.116  2915-2972  ActivityThread          android.process.acore                E  Failed to find provider info for call_log
2025-06-02 20:07:56.666  1773-1834  ProtoLiteUtils          com.google.android.gms               E  Corrupt protobuf data, expected CRC: 82 computed CRC: 0
2025-06-02 20:07:58.434  1435-1435  AudioMediaPlayerWrapper com.google.android.bluetooth         E  The callback playback state doesn't match the current state
2025-06-02 20:07:58.439  1435-1435  AudioMediaPlayerWrapper com.google.android.bluetooth         E  The callback playback state doesn't match the current state
2025-06-02 20:08:04.986  1335-2965  bnbi                    com.google.android.gms.persistent    E  Phenotype API error. Event: # ddtm@5448252a, EventCode: GET_STORAGE_INFO [CONTEXT service_id=51 ] (Ask Gemini)
                                                                                                    bmzp: 29514: Storage info not created for GMS or Play Store.
                                                                                                    	at bndq.b(:com.google.android.gms@242632114@24.26.32 (230800-650348549):807)
                                                                                                    	at bncl.i(:com.google.android.gms@242632114@24.26.32 (230800-650348549):13)
                                                                                                    	at bnbi.h(:com.google.android.gms@242632114@24.26.32 (230800-650348549):18)
                                                                                                    	at bnbi.f(:com.google.android.gms@242632114@24.26.32 (230800-650348549):11)
                                                                                                    	at auvg.eV(:com.google.android.gms@242632114@24.26.32 (230800-650348549):1)
                                                                                                    	at auvl.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):132)
                                                                                                    	at cjtd.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):21)
                                                                                                    	at adtm.c(:com.google.android.gms@242632114@24.26.32 (230800-650348549):50)
                                                                                                    	at adtm.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):76)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at adys.run(:com.google.android.gms@242632114@24.26.32 (230800-650348549):8)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:08:06.515  2582-2702  Finsky                  com.android.vending                  E  [528] gjj.accept(91): GMS compliance query failed.
                                                                                                    com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException: Timed out: ablb@6cdb9f9[status=PENDING, setFuture=[dqd@3d83d3e[status=PENDING, info=[tag=[vxg@1af279f]]]]]
2025-06-02 20:08:23.338  2582-2702  Finsky                  com.android.vending                  E  [528] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:08:23.339  2582-2702  Finsky                  com.android.vending                  E  [528] rcz.WA(261): [PLUS] Failed to trigger NOW_EXCLUSIVE urgency sync (Ask Gemini)
                                                                                                    java.lang.IllegalStateException: Cannot sync with 0 Android ID
                                                                                                    	at suw.a(PG:71)
                                                                                                    	at rak.a(PG:144)
                                                                                                    	at ablb.d(PG:3)
                                                                                                    	at abld.run(PG:42)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at kiq.run(PG:324)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:08:23.339  2582-2702  Finsky                  com.android.vending                  E  [528] gmr.WA(29): [DeviceConfig] failed to update device attribute payloads (Ask Gemini)
                                                                                                    java.lang.IllegalStateException: Cannot sync with 0 Android ID
                                                                                                    	at suw.a(PG:71)
                                                                                                    	at rak.a(PG:144)
                                                                                                    	at ablb.d(PG:3)
                                                                                                    	at abld.run(PG:42)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at kiq.run(PG:324)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
2025-06-02 20:08:23.379  2582-2740  Finsky                  com.android.vending                  E  [542] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:08:27.751  2582-2740  Finsky                  com.android.vending                  E  [542] iuw.a(52): Unexpected android-id = 0
2025-06-02 20:08:36.202  3214-3214  ng:quick_launch         com.android.vending                  E  Not starting debugger since process cannot load the jdwp agent.
2025-06-02 20:08:47.669 23588-23721 PlayCommon              com.android.vending                  E  [522] ypn.j(1620): Failed to connect to server for server timestamp: java.net.SocketTimeoutException: failed to connect to play.googleapis.com/2001:4860:4802:36::223 (port 443) from /fec0::5054:ff:fe12:3456 (port 39740) after 40000ms
2025-06-02 20:08:51.331   597-763   WifiScoringParams       system_server                        E  Invalid frequency(-1), using 5G as default rssi array
2025-06-02 20:08:51.835  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:08:54.670   597-3036  CellBroadcastUtils      system_server                        E  getDefaultCellBroadcastReceiverPackageName: no package found
2025-06-02 20:08:54.829   597-3036  CellBroadcastUtils      system_server                        E  getDefaultCellBroadcastReceiverPackageName: no package found
2025-06-02 20:08:54.989  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:08:55.584  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:08:56.526  2621-3069  OpenGLRenderer          com...d.apps.automotive.inputmethod  E  Unable to match the desired swap behavior.
2025-06-02 20:08:58.206   597-1921  TaskPersister           system_server                        E  File error accessing recents directory (directory doesn't exist?).
2025-06-02 20:08:58.209   597-1921  TaskPersister           system_server                        E  File error accessing recents directory (directory doesn't exist?).
2025-06-02 20:09:01.903   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 20:09:13.703  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:09:14.025  1022-1135  OpenGLRenderer          com.android.systemui                 E  Unable to match the desired swap behavior.
2025-06-02 20:09:14.253  2619-2619  Toast                   me.wcy.music                         E  setGravity() shouldn't be called on text toasts, the values won't be used
2025-06-02 20:09:14.268  2619-2619  Toast                   me.wcy.music                         E  setGravity() shouldn't be called on text toasts, the values won't be used
2025-06-02 20:09:14.407  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:09:19.385  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:09:19.894  2619-2619  Toast                   me.wcy.music                         E  setGravity() shouldn't be called on text toasts, the values won't be used
2025-06-02 20:09:19.897  2619-2619  Toast                   me.wcy.music                         E  setGravity() shouldn't be called on text toasts, the values won't be used
2025-06-02 20:09:20.057  2619-2855  OpenGLRenderer          me.wcy.music                         E  Unable to match the desired swap behavior.
2025-06-02 20:09:32.297 23588-2399  FirebaseInstanceId      com.android.vending                  E  Failed to get FIS auth token (Ask Gemini)
                                                                                                    java.util.concurrent.ExecutionException: com.google.firebase.installations.FirebaseInstallationsException: Firebase Installations Service is unavailable. Please try again later.
                                                                                                    	at vtw.iJ(PG:32)
                                                                                                    	at vtw.G(PG:31)
                                                                                                    	at afgv.i(PG:183)
                                                                                                    	at acdh.a(PG:191)
                                                                                                    	at ujn.run(PG:251)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at vbl.run(PG:7)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
                                                                                                    Caused by: com.google.firebase.installations.FirebaseInstallationsException: Firebase Installations Service is unavailable. Please try again later.
                                                                                                    	at acei.b(PG:356)
                                                                                                    	at acdu.run(PG:233)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012) 

                                                                                                    java.lang.IllegalStateException: Cannot sync with 0 Android ID
                                                                                                    	at suw.a(PG:71)
                                                                                                    	at rak.a(PG:144)
                                                                                                    	at ablb.d(PG:3)
                                                                                                    	at abld.run(PG:42)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at kiq.run(PG:324)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)

                                                                                                    Caused by: com.google.firebase.installations.FirebaseInstallationsException: Firebase Installations Service is unavailable. Please try again later.
                                                                                                    	at acei.b(PG:356)
                                                                                                    	at acdu.run(PG:233)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012) 
2025-06-02 19:03:00.491 23442-23518 Finsky                  com.android.vending                  E  [496] lua.a(218): Error when retrieving FCM instance id
2025-06-02 19:03:01.827   349-349   android.ha...rvice-mock and....power.stats@1.0-service.mock  E  Failed to getEnergyData
2025-06-02 19:03:02.558 23588-23808 FirebaseInstanceId      com.android.vending                  E  Failed to get FIS auth token (Ask Gemini)
                                                                                                    java.util.concurrent.ExecutionException: com.google.firebase.installations.FirebaseInstallationsException: Firebase Installations Service is unavailable. Please try again later.
                                                                                                    	at vtw.iJ(PG:32)
                                                                                                    	at vtw.G(PG:31)
                                                                                                    	at afgv.i(PG:183)
                                                                                                    	at acdh.a(PG:191)
                                                                                                    	at ujn.run(PG:251)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at vbl.run(PG:7)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
                                                                                                    Caused by: com.google.firebase.installations.FirebaseInstallationsException: Firebase Installations Service is unavailable. Please try again later.
                                                                                                    	at acei.b(PG:356)
                                                                                                    	at acdu.run(PG:233)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012) 
2025-06-02 19:03:02.628 23588-23667 Finsky                  com.android.vending                  E  [499] lua.a(218): Error when retrieving FCM instance id